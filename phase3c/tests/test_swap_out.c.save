/*
 * test_swap_out.c
 *
 * THIS TEST IS BROKEN. Sharing a frame is not supported by the solution. 
 *  
 *  Tests that P3SwapOut is being called properly. By default there are 3 pages and 2 frames, 
 *  causing P3SwapOut to be called for the 3rd page. P3SwapOut returns frame 1 and P3SwapIn 
 *  returns that page 2 is an existing page, so pages 1 and 2 should have the same contents.
 *
 */
#include <usyscall.h>
#include <libuser.h>
#include <assert.h>
#include <usloss.h>
#include <stdlib.h>
#include <phase3.h>
#include <stdarg.h>
#include <unistd.h>

#include "tester.h"
#include "phase3Int.h"

#define PAGES 3             // # of pages
#define FRAMES (PAGES - 1)  // # of frames
#define PAGERS 2            // # of pagers

static char *vmRegion;
static int  pageSize;

static int passed = FALSE;

#ifdef DEBUG
int debugging = 1;
#else
int debugging = 0;
#endif /* DEBUG */

static void
Debug(char *fmt, ...)
{
    va_list ap;

    if (debugging) {
        va_start(ap, fmt);
        USLOSS_VConsole(fmt, ap);
    }
}
static int selectedPage = -1;

static int
Child(void *arg)
{
    int     j;
    char    *page;
    int     pid;

    Sys_GetPID(&pid);
    Debug("Child (%d) starting.\n", pid);

    // Fill all pages with their page numbers. 
    for (j = 0; j < PAGES; j++) {
        page = vmRegion + j * pageSize;
        Debug("Child writing to page %d @ %p\n", j, page);
        for (int k = 0; k < pageSize; k++) {
            page[k] = j;
        }
    }

    // The selectedPage also in frame 1 so it should be filled with the last page number. 
    assert(selectedPage != -1);
    j = selectedPage;
    page = vmRegion + j * pageSize;
    Debug("Child reading from page %d @ %p\n", j, page);
    for (int k = 0; k < pageSize; k++) {
        TEST(page[k], PAGES-1);
    }
    Debug("Child done.\n");
    return 0;
}

static PID childPID;

int
P4_Startup(void *arg)
{
    int     rc;
    int     pid;
    int     status;

    Debug("P4_Startup starting.\n");
    rc = Sys_VmInit(PAGES, PAGES, FRAMES, PAGERS, (void **) &vmRegion);
    TEST(rc, P1_SUCCESS);


    pageSize = USLOSS_MmuPageSize();
    rc = Sys_Spawn("Child", Child, NULL, USLOSS_MIN_STACK * 4, 3, &childPID);
    assert(rc == P1_SUCCESS);
    rc = Sys_Wait(&pid, &status);
    assert(rc == P1_SUCCESS);
    TEST(status, 0);
    Debug("Child terminated\n");
    Sys_VmShutdown();
    PASSED();
    return 0;
}


void test_setup(int argc, char **argv) {
}

void test_cleanup(int argc, char **argv) {
    if (passed) {
        USLOSS_Console("TEST PASSED.\n");
    }
}

// Phase 3d stubs

#include "phase3Int.h"

int P3SwapInit(int pages, int frames) {return P1_SUCCESS;}
int P3SwapShutdown(void) {return P1_SUCCESS;}
int P3SwapFreeAll(PID pid) {return P1_SUCCESS;}
int P3SwapOut(int *frame) {
    USLOSS_PTE *pageTable;
    Debug("P3SwapOut\n");
    int rc = P3PageTableGet(childPID, &pageTable);
    assert(rc == P1_SUCCESS);
    for (int i = 0; i < PAGES; i++) {
        if (pageTable[i].frame == 1) {
            selectedPage = i;
            break;
        }
    }
    if (selectedPage == -1) {
        USLOSS_Console("Cannot determine which page is in frame 1.\n");
        passed = FALSE;
        USLOSS_Halt(1);
    }
    *frame = 1; 
    return P1_SUCCESS;
}

int P3SwapIn(PID pid, int page, int frame) {
    return (page == (PAGES-1)) ? P1_SUCCESS : P3_EMPTY_PAGE;
}



